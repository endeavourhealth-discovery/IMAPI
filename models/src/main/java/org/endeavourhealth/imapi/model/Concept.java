package org.endeavourhealth.imapi.model;

import com.fasterxml.jackson.annotation.*;

import java.util.*;


@JsonPropertyOrder({"conceptType","status","version","isRef","iri","name","description",
        "code","scheme","annotations","expression","subClassOf",",equivalentTo","DisjointWith","isA","containedIn"
   ,"property","member","memberExpansion","mappedFrom","recordModel","role"})
public class Concept implements IMAnnotated {
    private Integer dbid;
    private String iri;
    private String name;
    private String description;
    private String code;
    private ConceptReference scheme;
    private ConceptStatus status;
    private Integer version;
    private Set<ConceptReference> isA;
    private Set<Annotation> annotations;
    private ConceptType conceptType;
    private Set<ClassExpression> subClassOf;
    private Set<ClassExpression> equivalentTo;
    private ClassExpression expression;
    private Set<ConceptReference> DisjointWith;
    private List<TermCode> synonym;
    private List<ConceptReference> containedIn;
    private boolean isRef;
    private Map<String,String> stats;
    private List<PropertyConstraint> property;
    private List<Concept> recordModel;
    private Set<Relationship> role;
    private List<ClassExpression> member;
    private List<ConceptReference> memberExpansion;
    private Set<PropertyAxiom> subObjectPropertyOf;
    private PropertyAxiom inversePropertyOf;
    private Set<ClassExpression> objectPropertyRange;
    private Set<ClassExpression> propertyDomain;
    private Set<SubPropertyChain> subPropertyChain;
    private Axiom isFunctional;
    private Axiom isSymmetric;
    private Axiom isTransitive;
    private Axiom isReflexive;
    private DataTypeDefinition dataTypeDefinition;
    private Set<PropertyAxiom> subDataPropertyOf;
    private Set<DataPropertyRange> dataPropertyRange;
    private Set<PropertyAxiom> subAnnotationPropertyOf;
    private List<ConceptReference> mappedFrom;




    /**
     * Alternative constructor passing in the preferred concept type
     * @param conceptType
     */
    public Concept(ConceptType conceptType){
        this.setConceptType(conceptType);
    }

    public Concept() {
        this.setConceptType(ConceptType.CLASSONLY);

    }


    @Override
    public Integer getDbid() {
        return dbid;
    }

    @Override
    public Concept setDbid(Integer dbid) {
        this.dbid = dbid;
        return this;
    }


    @Override
    public ConceptStatus getStatus() {
        return status;
    }

    @Override
    public Concept setStatus(ConceptStatus status) {
        this.status=status;
        return this;
    }

    @Override
    public Integer getVersion() {
        return version;
    }

    @Override
    public Concept setVersion(Integer version) {
        this.version= version;
        return this;
    }



    public Concept(String iri, String name) {
        this.iri = iri;
        this.name = name;
    }

    public String getIri() {
        return iri;
    }

    public Concept setIri(String iri) {
        this.iri = iri;
        return this;
    }



    public String getName() {
        return name;
    }

    public Concept setName(String name) {
        this.name = name;
        return this;
    }

    public String getDescription() {
        return description;
    }

    public Concept setDescription(String description) {
        this.description = description;
        return this;
    }

    public ConceptReference getScheme() {
        return scheme;
    }

    @JsonSetter
    public Concept setScheme(ConceptReference scheme) {
        this.scheme = scheme;
        return this;
    }

    public Concept setScheme(String scheme) {
        this.scheme = new ConceptReference(scheme);
        return this;
    }

    public String getCode() {
        return code;
    }

    public Concept setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Returns a list of IRIs which are the direct superconcepts of this concept
     * <p>This may include asserted superclasses and super properties and equivalent classes as well as those generated by a reasoner</p>
     * @return list of super concepts
     */
    @JsonProperty("IsA")
    public Set<ConceptReference> getIsA() {
        return isA;
    }

    public Concept setIsA(Set<ConceptReference> isA) {
        this.isA = isA;
        return this;
    }
    public Concept addIsa(ConceptReference isa){
        if (this.isA==null)
            isA= new HashSet<>();
        isA.add(isa);
        return this;
    }

    @JsonProperty("annotations")
    public Set<Annotation> getAnnotations() {
        return annotations;
    }

    public Concept setAnnotations(Set<Annotation> annotations) {
        this.annotations = annotations;
        return this;
    }
    public Concept addAnnotation(Annotation annotation) {
        if (this.annotations==null)
            this.annotations= new HashSet<>();
        this.annotations.add(annotation);
        return this;
    }



    @JsonProperty("conceptType")
    public ConceptType getConceptType() {
        return conceptType;
    }

    public Concept setConceptType(ConceptType conceptType) {
        this.conceptType = conceptType;
        return this;
    }
    @JsonProperty("DisjointWith")
    public Set<ConceptReference> getDisjointWith() {
        return DisjointWith;
    }

    public Concept setDisjointWith(Set<ConceptReference> DisjointWith) {
        this.DisjointWith = DisjointWith;
        return this;
    }
    public Concept addDisjointWith(ConceptReference iri) {
        if (this.DisjointWith == null)
            this.DisjointWith = new HashSet<>();
        this.DisjointWith.add(iri);
        return this;
    }

    public Concept addDisjointWith(String iri) {
        if (this.DisjointWith == null)
            this.DisjointWith = new HashSet<>();
        this.DisjointWith.add(new ConceptReference(iri));
        return this;
    }

    /**
     * @deprecated use property constraints instead
     * @return
     */
    @Deprecated
    @JsonProperty("Expression")
    public ClassExpression getExpression(){
        return expression;
    }

    /**
     * @deprecated use property constraints instead
     * @param cex
     * @return
     */
    @Deprecated
    public Concept setExpression(ClassExpression cex){
        this.expression = cex;
        return this;
    }

    @JsonProperty("SubClassOf")
    public Set<ClassExpression> getSubClassOf() {
        return subClassOf;
    }

    public Concept setSubClassOf(Set<ClassExpression> subClassOf) {
        this.subClassOf = subClassOf;
        return this;
    }

    public Concept addSubClassOf(ClassExpression subClassOf) {
        if (this.subClassOf == null)
            this.subClassOf = new HashSet<>();

        this.subClassOf.add(subClassOf);
        return this;
    }

    @JsonProperty("EquivalentTo")
    public Set<ClassExpression> getEquivalentTo() {
        return equivalentTo;
    }

    public Concept setEquivalentTo(Set<ClassExpression> equivalentTo) {
        this.equivalentTo = equivalentTo;
        return this;
    }

    public Concept addEquivalentTo(ClassExpression equivalentTo) {
        if (this.equivalentTo == null)
            this.equivalentTo = new HashSet<>();
        this.equivalentTo.add(equivalentTo);
        return this;
    }

    public List<TermCode> getSynonym() {
        return synonym;
    }

    public Concept setSynonym(List<TermCode> synonym) {
        this.synonym = synonym;
        return this;
    }
    public Concept addSynonym(TermCode synonym){
        if (this.synonym==null)
            this.synonym= new ArrayList<>();
        this.synonym.add(synonym);
        return this;
    }

    @JsonProperty("isRef")
    public boolean isRef() {
        return isRef;
    }

    public Concept setRef(boolean ref) {
        isRef = ref;
        return this;
    }

    public List<ConceptReference> getContainedIn() {
        return containedIn;
    }

    public Concept setContainedIn(List<ConceptReference> containedIn) {
        this.containedIn = containedIn;
        return this;
    }
    public Concept addContainedIn(ConceptReference container){
        if (this.containedIn==null)
            this.containedIn= new ArrayList<>();
        this.containedIn.add(container);
        return this;
    }


    @JsonProperty("Statistics")
    public Map<String, String> getStats() {
        return stats;
    }

    public Concept setStats(Map<String, String> stats) {
        this.stats = stats;
        return this;
    }
    @JsonProperty("Property")
    public List<PropertyConstraint> getProperty() {
        return property;
    }

    public Concept setProperty(List<PropertyConstraint> property) {
        this.property = property;
        return this;
    }
    public Concept addProperty(PropertyConstraint property){
        if (this.property==null)
            this.property= new ArrayList<>();
        this.property.add(property);
        return this;
    }

    @JsonProperty("RecordModel")
    public List<Concept> getRecordModel() {
        return recordModel;
    }

    public Concept setRecordModel(List<Concept> recordModel) {
        this.recordModel = recordModel;
        return this;
    }
    public Concept addRecordModel(Concept model){
        if (this.recordModel==null)
            this.recordModel= new ArrayList<>();
        this.recordModel.add(model);
        return this;
    }

    public Set<Relationship> getRole() {
        return role;
    }

    public Concept setRole(Set<Relationship> role) {
        this.role = role;
        return this;
    }
    public Concept addRole(Relationship role){
        if (this.role==null)
            this.role= new HashSet<>();
        this.role.add(role);
        return this;
    }
    @JsonProperty("Member")
    public List<ClassExpression> getMember() {
        return member;
    }

    public Concept setMember(List<ClassExpression> member) {
        this.member = member;
        return this;
    }
    public Concept addMember (ClassExpression expression){
        if (this.member==null)
            this.member= new ArrayList<>();
        member.add(expression);
        return this;
    }

    @JsonProperty("MemberExpansion")
    public List<ConceptReference> getMemberExpansion() {
        return memberExpansion;
    }

    public Concept setMemberExpansion(List<ConceptReference> memberExpansion) {
        this.memberExpansion = memberExpansion;
        return this;
    }
    public Concept addMemberExpansion(ConceptReference expansion){
        if (this.memberExpansion==null)
            this.memberExpansion= new ArrayList<>();
        this.memberExpansion.add(expansion);
        return this;
    }
    @JsonProperty("IsFunctional")
    public Axiom getIsFunctional() {
        return isFunctional;
    }

    public void setIsFunctional(Axiom isFunctional) {
        this.isFunctional = isFunctional;
    }

    @JsonProperty("IsSymmetric")
    public Axiom getIsSymmetric() {
        return isSymmetric;
    }

    public void setIsSymmetric(Axiom isSymmetric) {
        this.isSymmetric = isSymmetric;
    }
    @JsonProperty("IsTransitive")
    public Axiom getIsTransitive() {
        return isTransitive;
    }

    public void setIsTransitive(Axiom isTransitive) {
        this.isTransitive = isTransitive;
    }

    @JsonProperty("IsReflexive")
    public Axiom getIsReflexive() {
        return isReflexive;
    }

    public void setIsReflexive(Axiom isReflexive) {
        this.isReflexive = isReflexive;
    }

    @JsonProperty("SubObjectPropertyOf")
    public Set<PropertyAxiom> getSubObjectPropertyOf() {
        return subObjectPropertyOf;
    }

    public Concept setSubObjectPropertyOf(Set<PropertyAxiom> subObjectPropertyOf) {
        this.subObjectPropertyOf = subObjectPropertyOf;
        return this;
    }

    public Concept addSubObjectPropertyOf(PropertyAxiom subObjectPropertyOf) {
        if (this.subObjectPropertyOf == null)
            this.subObjectPropertyOf = new HashSet<>();
        this.subObjectPropertyOf.add(subObjectPropertyOf);

        return this;
    }

    @JsonProperty("InversePropertyOf")
    public PropertyAxiom getInversePropertyOf() {
        return inversePropertyOf;
    }

    public Concept setInversePropertyOf(PropertyAxiom inversePropertyOf) {
        this.inversePropertyOf = inversePropertyOf;
        return this;
    }

    @JsonProperty("ObjectPropertyRange")
    public Set<ClassExpression> getObjectPropertyRange() {
        return objectPropertyRange;
    }

    public Concept setObjectPropertyRange(Set<ClassExpression> propertyRange) {
        this.objectPropertyRange = propertyRange;
        return this;
    }
    public Concept addObjectPropertyRange(ClassExpression range) {
        if (this.objectPropertyRange == null)
            this.objectPropertyRange = new HashSet<>();
        this.objectPropertyRange.add(range);

        return this;
    }

    @JsonProperty("PropertyDomain")
    public Set<ClassExpression> getPropertyDomain() {
        return propertyDomain;
    }

    public Concept setPropertyDomain(Set<ClassExpression> propertyDomain) {
        this.propertyDomain = propertyDomain;
        return this;
    }
    public Concept addPropertyDomain(ClassExpression domain) {
        if (this.propertyDomain == null)
            this.propertyDomain = new HashSet<>();
        this.propertyDomain.add(domain);

        return this;
    }



    @JsonProperty("SubPropertyChain")
    public Set<SubPropertyChain> getSubPropertyChain() {
        return subPropertyChain;
    }

    public Concept setSubPropertyChain(Set<SubPropertyChain> subPropertyChain) {
        this.subPropertyChain = subPropertyChain;
        return this;
    }

    public Concept addSubPropertyChain(SubPropertyChain subPropertyChain) {
        if (this.subPropertyChain == null)
            this.subPropertyChain = new HashSet<>();

        this.subPropertyChain.add(subPropertyChain);
        return this;
    }
    @JsonProperty("DataTypeDefinition")
    public DataTypeDefinition getDataTypeDefinition() {
        return dataTypeDefinition;
    }

    public Concept setDataTypeDefinition(DataTypeDefinition dataTypeDefinition) {
        this.dataTypeDefinition = dataTypeDefinition;
        return this;
    }

    @JsonProperty("SubDataPropertyOf")
    public Set<PropertyAxiom> getSubDataPropertyOf() {
        return subDataPropertyOf;
    }

    public Concept setSubDataPropertyOf(Set<PropertyAxiom> subDataPropertyOf) {
        this.subDataPropertyOf = subDataPropertyOf;
        return this;
    }
    public Concept addSubDataPropertyOf(PropertyAxiom prop) {
        if (this.subDataPropertyOf == null)
            this.subDataPropertyOf = new HashSet<>();
        this.subDataPropertyOf.add(prop);

        return this;
    }


    @JsonProperty("DataPropertyRange")
    public Set<DataPropertyRange> getDataPropertyRange() {
        return dataPropertyRange;
    }

    public Concept setDataPropertyRange(Set<DataPropertyRange> dataPropertyRange) {
        this.dataPropertyRange = dataPropertyRange;
        return this;
    }
    public Concept addDataPropertyRange(DataPropertyRange range) {
        if (this.dataPropertyRange == null)
            this.dataPropertyRange = new HashSet<>();
        this.dataPropertyRange.add(range);
        return this;
    }

    @JsonProperty("SubAnnotationPropertyOf")
    public Set<PropertyAxiom> getSubAnnotationPropertyOf() {
        return subAnnotationPropertyOf;
    }

    public Concept setSubAnnotationPropertyOf(Set<PropertyAxiom> subAnnotationPropertyOf) {
        this.subAnnotationPropertyOf = subAnnotationPropertyOf;
        return this;
    }

    public Concept addSubAnnotationPropertyOf(PropertyAxiom sub) {
        if (this.subAnnotationPropertyOf == null)
            this.subAnnotationPropertyOf = new HashSet<>();

        this.subAnnotationPropertyOf.add(sub);
        return this;
    }

    @JsonProperty("MappedFrom")
    public List<ConceptReference> getMappedFrom() {
        return mappedFrom;
    }

    public Concept setMappedFrom(List<ConceptReference> mappedFrom) {
        this.mappedFrom = mappedFrom;
        return this;
    }
    public Concept addMappedFrom(ConceptReference mappedFrom){
        if (this.mappedFrom==null)
            this.mappedFrom= new ArrayList<>();
        this.mappedFrom.add(mappedFrom);
        return this;
    }




}
