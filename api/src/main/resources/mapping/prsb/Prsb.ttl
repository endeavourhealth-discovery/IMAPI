@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix im: <http://endhealth.info/im#>.
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix shacl: <http://www.w3.org/ns/shacl#> .
@prefix rs: <http://prsb.info/rs#> .
@base <http://endhealth.info/mapping/prsb.ttl#>.

<#Prsb> a rr:TriplesMap;
  rr:subjectMap [
    fnml:functionValue [
        rr:predicateObjectMap [
          rr:predicate fno:executes ;
          rr:objectMap [ rr:constant im:generateIri ] 
        ];
    ];
  ];

  rr:predicateObjectMap [
    rr:predicate rdf:type;
    rr:objectMap [
      fnml:functionValue [
        rr:predicateObjectMap [
          rr:predicate fno:executes ;
          rr:objectMap [ rr:constant im:getType ] 
        ];
      ]
	  ]
	];

  rr:predicateObjectMap [
    rr:predicate rdfs:comment;
    rr:objectMap [
      rml:reference "desc[0]['#text']"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate im:label;
    rr:objectMap [
      rml:reference "name[0]['#text']"
    ]
  ].

  # rr:predicateObjectMap [
  #   rr:predicate im:isA;
  #   rr:objectMap [
  #     fnml:functionValue [
  #       rr:predicateObjectMap [
  #         rr:predicate fno:executes ;
  #         rr:objectMap [ rr:constant im:handleParentRels ] 
  #       ];
  #     ]
	#   ]
	# ];

  # rr:predicateObjectMap [
  #   rr:predicate im:isA;
  #   rr:objectMap [
  #     fnml:functionValue [
  #       rr:predicateObjectMap [
  #         rr:predicate fno:executes ;
  #         rr:objectMap [ rr:constant im:getIsas ] 
  #       ];
  #     ]
	#   ]
	# ];

  # rr:predicateObjectMap [
  #   rr:predicate im:idconstant;
  #   rr:objectMap [
  #     rr:constant "http://endhealth.info/ref#iddisplay";
  #   ]
  # ];

  
  # rr:predicateObjectMap [
  #   rr:predicate im:idtemplate;
  #   rr:objectMap [
  #     rr:template "http://endhealth.info/ref#{iddisplay}";
  #   ]
  # ];
  
  # rr:predicateObjectMap [
  #   rr:predicate shacl:minCount;
  #   rr:objectMap [
  #     rml:reference "minimumMultiplicity"
  #   ]
  # ];

  # rr:predicateObjectMap [
  #   rr:predicate shacl:maxCount;
  #   rr:objectMap [
  #     rml:reference "maximumMultiplicity"
  #   ]
  # ];

  # rr:predicateObjectMap [
  #   rr:predicate shacl:optional;
  #   rr:objectMap [
  #     fnml:functionValue [
  #       rr:predicateObjectMap [
  #         rr:predicate fno:executes ;
  #         rr:objectMap [ rr:constant im:getOptional ] 
  #       ];
  #     ]
	#   ]
  # ];

  # im & rdf(s) & prsb

  # rr:predicateObjectMap [
  #   rr:predicate rs:operationalisation;
  #   rr:objectMap [
  #     rml:reference "operationalization[0]['#text']"
  #   ]
  # ];

  # rr:predicateObjectMap [
  #   rr:predicate im:code;
  #   rr:objectMap [
  #     rml:reference "iddisplay"
  #   ]
  # ];

  # rr:predicateObjectMap [
  #   rr:predicate im:hasContext;
  #   rr:objectMap [
  #     rml:reference "context[0]['#text']"
  #   ]
  # ];

  # rr:predicateObjectMap [
  #   rr:predicate im:shortName;
  #   rr:objectMap [
  #     rml:reference "shortName"
  #   ]
  # ];